////////////////////////////////////////
// Builtins enhancements
////////////////////////////////////////
map.hasIndex = function(index)
	return sh411.Auxiliary.binary_search(self.indexes, index)
end function

// Returns true if value exists. Returns false otherwise.
map.hasValue = function(value)
	return sh411.Auxiliary.binary_search(self.values, value)
end function


// Maps function to the list. Returns a list of mapped values.
list.fmap = function(function_)
	new_self = []
	for i in self; new_self.push(function_(i)); end for
	return new_self
end function

list.hasIndex = function(index)
	return sh411.Auxiliary.binary_search(self, index)
end function


////////////////////////////////////////
// Bindings
////////////////////////////////////////
Object = function()
	return new {}
end function

fmap = function(list_, function_)
	return list_.fmap(@function_)
end function


////////////////////////////////////////
// Custom implementations
////////////////////////////////////////
sh411 = Object()

// Usage: lambda function(); <body> ; end function
sh411.lambda = function(function_)
	return function_()
end function

sh411.Implicit = Object()

sh411.Implicit.memory_allocate = function(object)
	pointer = {}

	pointer._value = [object]
	
	pointer.dereference = function(value)
		if not value then return self._value[0]
		self._value[0] = value
	end function

	return pointer
end function



sh411.Library = Object()

// function to include non-user libraries. returns library if it finds it in the file system, returns null otherwise
sh411.Library.include = function(library_name)
	file_system = []
	while file.system.len() != 0
		current_file = file_system.pull()
		if current_file.is_folder() then
			folders = current_file.get_folders()
			files = current_file.get_files()
			file_system = folders + files + file_system
		end if
		potential_library = include_lib(current_file.path())
		if potential_library then return potential_library
	end while
end function


sh411.String = Object()

sh411.String.lower_letters = "qwertyuiopasdfghjklzxcvbnm"
sh411.String.upper_letters = sh411.String.lower_letters.upper()
sh411.String.qwerty_abc = sh411.String.lower_letters + sh411.String.upper_letters

sh411.String.random = function(length)
	abc = self.qwerty_abc.values
	str = ""
	i = 0
	while i < length
		abc.shuffle()
		str = str + abc[0]
		i = i + 1
	end while
	return str
end function

sh411.String.append_characters = function(phrase, count, character)
	if not character then character = " "
	if not count then count = phrase.len()
	// phrase to string convertion
	phrase = phrase + ""
	if phrase.len() < count then
		while phrase.len() < count
			phrase = phrase + character
		end while
	else if phrase.len() > count then
		while phrase.len() > count
			phrase = phrase.values()
			phrase[-1] = ""
			new_phrase = ""
			for char_ in phrase
				new_phrase = new_phrase + char_
			end for
			phrase = new_phrase
		end while
	end if
	return phrase + character
end function


sh411.Auxiliary = Object()

sh411.Auxiliary.shell = get_shell()
sh411.Auxiliary.computer = sh411.Auxiliary.shell.host_computer()

// I dont know if it is faster than Linear search in MiniScript, but...
// Introducing you, the modern way of finding index in list:
// Iterative binary search algorithm
sh411.Auxiliary.binary_search = function(list_, i)
	start = 0
	end_ = list_.len() - 1
         
    while start <= end_
        mid = round((start + end_) / 2)
        if list_[mid] == i then
			return true
        else if list_[mid] < i then
             start = mid + 1
        else
             end_ = mid - 1
		end if
	end while
  
    return false
end function


sh411.Color = Object()

// This is not intended to be accessed directly.
sh411.Color._default_color = "white"

sh411.Color.set_default_color = function(color)
	sh411.Color._default_color = color
end function

sh411.Color.get_default_color = function(color)
	return sh411.Color._default_color
end function

sh411.Color._ = function(message, color)
	if not color then color = sh411.Color._default_color
	return "<color=" + color + ">" + message + "</color>"
end function


sh411.Process = Object()

// Process object constructor.
sh411.Process.Process = function(user, pid, cpu_usage, mem_usage, name_)
	this = {}

	this.user = user
	this.pid = pid
	this.cpu_usage = cpu_usage
	this.mem_usage = mem_usage
	this.name_ = name_

	this.kill = function()
		return sh411.Auxiliary.computer.close_program(this.pid)
	end function

	this.exists = function()
		return sh411.Process.exists(this.pid)
	end function
	
	return this
end function

// Returns running processes as a list of Process() objects.
sh411.Process.get_running_processes = function()
	lines = sh411.Auxiliary.computer.show_procs().split(char(10))
	process_list = []
	for line in lines
		if line == lines[0] then continue
		l = line.split(" ")
		l[1] = l[1].val
		l[2] = l[2].remove("%").val
		l[3] = l[3].remove("%").val
		process = new self.Process(l[0], l[1], l[2], l[3], l[4])
		process_list = process_list + [process]
	end for
	return process_list
end function

sh411.Process.get_process_count = function()
	return self.get_running_processes().len()
end function

sh411.Process.get_total_cpu_usage = function()
	cpu_usage = 0
	for p in self.get_running_processes()
		cpu_usage = cpu_usage + p.cpu_usage
	end for
	return cpu_usage
end function

sh411.Process.get_total_mem_usage = function()
	mem_usage = 0
	for p in self.get_running_processes()
		mem_usage = mem_usage + p.mem_usage
	end for
	return mem_usage
end function

sh411.Process.exists = function(pid)
	for p in self.get_running_processes()
		if p.pid == pid then return true
	end for
	return false
end function


sh411.Configuration = Object()

// Config object constructor. delimiter is a delimiter between option and value pairs inside config file.
sh411.Configuration.Config = function(absolute_path, delimiter)
	this = {}
	
	this.path = absolute_path
	this.delimiter = delimiter

	parts = this.path.split("/")
	new_path = ""
	for part in parts
		if part != parts[-1] then
			sh411.Auxiliary.computer.create_folder(new_path, part)
		else
			sh411.Auxiliary.computer.touch(new_path, part)
		end if
		new_path = new_path + part + "/"
	end for
	this.file = sh411.Auxiliary.computer.File(new_path)
	if not this.file then return Configuration._creation_error("File object is null.")
	
	this.set_option = function(option, value)
		lines = this.file.get_content().split(char(10))
		is_changed = false
		changed_config = ""
		for line in lines
			original_line = line
			line = line.split(this.delimiter)
			if not line then continue
			if line.len != 2 then
				if original_line != "" and original_line[0] == "#" then 
					changed_config = changed_config + original_line + char(10)
				end if
				continue
			end if
			line_option = line[0].remove(" ")
			line_value = line[1].remove(" ")
			if option.lower() == line_option.lower() and not is_changed then 
				line_value = value
				is_changed = true
			end if
			changed_config = changed_config + line_option + " " + this.delimiter + " " + line_value + char(10)
		end for
		if not is_changed then changed_config = changed_config + option + " " + this.delimiter + " " + value + char(10)
		this.file.set_content(changed_config)
	end function

	this.get_option = function(option_name, fallback_value)
		if not fallback_value then fallback_value = null
		value = null
		lines = this.file.get_content().split(char(10))
		for line in lines
			line = line.split(this.delimiter)
			if line.len != 2 then continue
			line_option_name = line[0].remove(" ")
			line_value = line[1].remove(" ")
			if line_option_name == option_name then
				value = line_value
				break
			end if
		end for
		if fallback_value and not value then
			value = fallback_value
			this.set_option(option_name, value)
		end if
		if value == "true" then value = true
		if value == "false" then value = false
		return value
	end function

	return this
end function

sh411.Configuration._creation_error = function(message)
	return exit(Color._("Config object creation error: " + message, "red"))
end function
